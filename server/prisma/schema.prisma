// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  password         String
  username         String
  yearOfPassingOut Int
  avatar           String           @default("Doodle")
  courseId         String
  xHandle          String?
  linkedIn         String?
  createdAt        DateTime         @default(now())
  interviews       Interview[]
  course_branch    Course           @relation(fields: [courseId], references: [courseInitials])
  savedBy          SavedInterview[]
}

model Course {
  id             String  @id @default(cuid())
  courseInitials String  @unique
  degree         String
  branch         String?
  user           User[]
}

model Interview {
  id              String              @id @default(cuid())
  authorId        String
  companyName     String
  yearOfInterview Int
  role            String
  CTCOffered      Int?
  interviewStatus String
  viewCount       Int                 @default(0)
  bookmarkCount   Int                 @default(0)
  difficultyLevel String              @default("EASY")
  createdAt       DateTime            @default(now())
  interviewRounds InterviewRound[]
  tags            InterviewTopicTag[] @relation("InterviewToTag")
  user            User                @relation(fields: [authorId], references: [id])
  saved           SavedInterview[]
}

model InterviewRound {
  id          String     @id @default(cuid())
  roundType   String
  note        String?
  questions   Question[]
  interviewId String

  // When an Interview is deleted, cascade the deletion to its InterviewRounds
  interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

model Question {
  id          String  @id @default(cuid())
  title       String
  description String?
  link        String?
  roundId     String

  // When an InterviewRound is deleted, cascade the deletion to its Questions
  interviewRound InterviewRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
}

model InterviewTopicTag {
  id          String @id @default(cuid())
  tagInitials String @unique
  tagName     String @unique

  // No onDelete: Cascade here for deleting the InterviewTag itself when Interview is deleted.
  // Prisma handles the join table cleanup automatically.
  interviews Interview[] @relation("InterviewToTag")
}

model SavedInterview {
  id          String    @id @default(cuid())
  userId      String
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])
  savedAt     DateTime  @default(now())

  @@unique([userId, interviewId])
}
